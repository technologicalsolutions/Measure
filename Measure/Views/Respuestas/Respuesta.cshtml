@using Measure.Enums
@using Measure.ViewModels.Usuario
@using Measure.ViewModels.Respuesta

@model ViewAnswerResult
@{
    Layout = ViewBag.Layout;
    ViewUser login = HttpContext.Current.Session["login"] as ViewUser;
    List<string> Imagenes = ViewBag.Imagenes as List<string>;
}
<div class="row">
    <div class="tab tab-primary">
        <div class="tab-pane fade show active">
            <div class="tab tab-primary">
                <ul class="nav nav-tabs nav-justified" role="tablist" id="tab-result">
                    @if (Model.Wellcome != null)
                    {
                        foreach (var item in Model.ContenidoReporte.Where(c => c.TipoContenido == (int)TipoContenido.Inicio).OrderBy(o => o.Orden).ToList())
                        {
                            <li class="nav-item">
                                <a class="nav-link active" href="#tab-Bienvenido" data-bs-toggle="tab" role="tab">
                                    <label>@item.Nombre</label>
                                </a>
                            </li>
                        }
                    }                    
                    <li class="nav-item">
                        <a class="nav-link" href="#tab-Consolidado" data-bs-toggle="tab" role="tab">
                            @if (login.Idioma == 1)
                            {
                                <label>Graficos</label>
                            }
                            else
                            {
                                <label>Graphs</label>
                            }
                        </a>
                    </li>
                    @for (int a = 0; a < Model.Grupos.Count(); a++)
                    {
                        if (Model.Grupos[a].Group.TipoReporte != 4)
                        {
                            <li class="nav-item">
                                <a class="nav-link" href="#tab-@a-@Model.Grupos[a].Group.Id.ToString()" data-bs-toggle="tab" role="tab">
                                    @if (login.Idioma == 1)
                                    {
                                        <label>@Model.Grupos[a].Group.es_Es</label>
                                    }
                                    else
                                    {
                                        <label>@Model.Grupos[a].Group.en_US</label>
                                    }
                                </a>
                            </li>
                        }
                    }
                    @foreach (var item in Model.ContenidoReporte.Where(c => c.TipoContenido == (int)TipoContenido.Fin).OrderBy(o => o.Orden).ToList())
                    {
                        <li class="nav-item">
                            <a class="nav-link" href="#tab-extra_@item.Id" data-bs-toggle="tab" role="tab">
                                <label>@item.Nombre</label>
                            </a>
                        </li>
                    }
                </ul>
                <div class="tab-content">
                    @if (Model.Wellcome != null)
                    {
                        <div class="tab-pane active" id="tab-Bienvenido" role="tabpanel">
                            @foreach (var item in Model.ContenidoReporte.Where(c => c.TipoContenido == (int)TipoContenido.Inicio).OrderBy(o => o.Orden).ToList())
                            {
                                <div class="row">
                                    <div class="col-12">
                                        <div class="text-center">
                                            <img src="@Imagenes[0]" style="width:100%" />
                                        </div>
                                    </div>
                                    <div class="col-12">
                                        <div class="container-sm mt-7" id="tab-Bienvenido-content">
                                            <p style="color: #59033B; font-family: Ubuntu !important;font-weight: bold; font-size: 22px; text-transform: capitalize;">@Model.Wellcome.Nombres</p>
                                            <p style="color: #59033B; font-weight: 400; font-size: 18px; text-transform: uppercase; ">@Model.Wellcome.NombreEmpresa</p>
                                            <p style="color: #1Ec6D9; font-weight: 400; font-size: 16px;">@Measure.Recursos.Recurso.Fecha: @Model.DataEncuesta.FechaRespuesta.ToString()</p>
                                            @Html.Raw(item.Html)
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    <div class="tab-pane" id="tab-Consolidado" role="tabpanel">
                        <div class="row">
                            <div class="col-12 TituloConsolidado">
                                @if (login.Idioma == 1)
                                {
                                    <p class="Pr-Title">Reporte DTI</p>
                                }
                                else
                                {
                                    <p class="Pr-Title">DTI Report</p>
                                }
                            </div>
                        </div>
                        <div class="row mt-2" id="charCanvas">
                            <div class="col-12 col-md-6">
                                <div id="char-consolidadoPolar"></div>
                            </div>
                            <div class="col-12 col-md-6">
                                <div id="char-consolidadoBarra"></div>
                            </div>
                        </div>
                        <div class="row row-cols-auto justify-content-start custom-backgroun-4 mt-2">
                            <div class="col m-4">
                                <img src="@Url.Content("~/Content/images/logo_login_w.png")" />
                            </div>
                            <div class="vr m-4"></div>
                            <div class="col m-4">
                                <img src="@Url.Content("~/Content/images/logo_login_2w.png")" />
                            </div>
                        </div>
                    </div>
                    @for (int a = 0; a < Model.Grupos.Count(); a++)
                    {
                        ViewAnswerGroupPoll Grupo = Model.Grupos[a];
                        <div class="tab-pane reporte" id="tab-@a-@Model.Grupos[a].Group.Id.ToString()" role="tabpanel">
                            <div class="row">
                                @switch ((TipoDeControl)Grupo.Group.TipoReporte)
                                {
                                    case TipoDeControl.ControlMatriz:
                                        <div class="col-12 TituloPregunta">
                                            <strong style="color: @Grupo.Group.Color !important">
                                                @if (login.Idioma == 1)
                                                {
                                                    <label>@Model.Grupos[a].Group.es_Es</label>
                                                }
                                                else
                                                {
                                                    <label>@Model.Grupos[a].Group.en_US</label>
                                                }
                                            </strong>
                                            @{
                                                var pregunta = Grupo.RespuestasMatriz.FirstOrDefault().Question.Texto.Split(':')[0];
                                            }
                                            <p style="color: @Grupo.Group.Color !important;font-size: 24px;margin-bottom: 0;">@pregunta</p>
                                        </div>
                                        <div class="col-12">
                                            <div class="row">
                                                @foreach (var item in Grupo.RespuestasMatriz)
                                                {
                                                    <div class="col-1">
                                                        @{
                                                            string heightCol = (item.ResultQuestionMatrizRange.Barra.Count() * 50).ToString() + "px";
                                                            string heigthCont = item.ResultQuestionMatrizRange.Radial.Serie < 10 ? "10%" : item.ResultQuestionMatrizRange.Radial.Serie.ToString() + "%";
                                                        }
                                                        <div class="row align-items-end parent-rectangle" style="height: @heightCol" id="@("col_" + Grupo.Group.Id.ToString())">
                                                            <div class="rectangle" style="background-color: @Grupo.Group.Color; height: @heigthCont;">
                                                                <p>@item.ResultQuestionMatrizRange.Radial.Serie</p>
                                                            </div>
                                                        </div>
                                                        <div class="row mt-2">
                                                            <div class="square" style="background-color:@Grupo.Group.Color"></div>
                                                        </div>
                                                        <div class="mt-1 text-center">
                                                            <strong>@Measure.Recursos.Recurso.Resultado</strong>
                                                        </div>
                                                    </div>
                                                    <div class="col-11" id="@("matriz_" + Grupo.Group.Id.ToString())">
                                                        @foreach (var SubItem in item.ResultQuestionMatrizRange.Barra)
                                                        {
                                                            int valor = 0;
                                                            int percentaje = 0;
                                                            if (SubItem.Item1 > 0)
                                                            {
                                                                valor = SubItem.Item1;
                                                                percentaje = 100 * valor / (((int)item.ControlM.Maximo - (int)item.ControlM.Minimo) + 1);
                                                            }
                                                            <div class="mt-1">
                                                                <strong>@SubItem.Item2</strong>
                                                            </div>
                                                            <div class="mt-1 parent-range">
                                                                <div class="content-1" style="background-color:@Grupo.Group.Color ;width: @percentaje%;">@SubItem.Item1</div>
                                                            </div>
                                                        }
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                        break;
                                }
                            </div>
                            <div class="row row-cols-auto justify-content-start custom-backgroun-4 mt-2">
                                <div class="col m-4">
                                    <img src="@Url.Content("~/Content/images/logo_login_w.png")" />
                                </div>
                                <div class="vr m-4"></div>
                                <div class="col m-4">
                                    <img src="@Url.Content("~/Content/images/logo_login_2w.png")" />
                                </div>
                            </div>
                        </div>
                    }
                    @foreach (var item in Model.ContenidoReporte.Where(c => c.TipoContenido == (int)TipoContenido.Fin).OrderBy(o => o.Orden).ToList())
                    {
                        <div class="tab-pane" id="tab-extra_@item.Id" role="tabpanel">
                            @Html.Raw(item.Html)
                        </div>
                    }
                </div>
                <div class="row mt-2">
                    <div class="col-12 text-center">
                        <button class="btn btn-pill btn-dark btn-lg custom-backgroun-1" id="prev-btn" onclick="Move(false)" disabled>
                            <i class="align-middle me-2 fas fa-fw fa-angle-left"></i>
                            <span class="align-middle">@Measure.Recursos.Recurso.Antes</span>
                        </button>
                        <button class="btn btn-pill btn-dark btn-lg custom-backgroun-1" id="next-btn" onclick="Move(true)">
                            <span class="align-middle">@Measure.Recursos.Recurso.Siguiente</span>
                            <i class="align-middle me-2 fas fa-fw fa-angle-right">  </i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@section scripts{
    <script type="text/javascript">
        const Menus = [].slice.call(document.querySelectorAll('#tab-result .nav-link'));
        const ColoresGrupos = ('@string.Join("|", Model.Grupos.Where(g => g.Group.TipoReporte == 3).Select(s => Html.Raw(s.Group.Color)).ToList())').split('|');
        let chartPolar = null;
        let chartCol = null;

        function DetailRadialBar(TextCategories, TextData, Selector) {
            var Categories = TextCategories.split('|');
            var Data = TextData.split('|');
            var optionsPolar = {
                colors: ColoresGrupos,
                series: Data,
                chart: {
                    type: 'polarArea',
                    height: '600px',
                    toolbar: {
                        show: false,
                    },
                    animations: {
                        enabled: false,
                        dynamicAnimation: {
                            enabled: false,
                        }
                    },
                },
                theme: {
                    mode: 'light',
                    palette: 'palette10',
                },
                plotOptions: {
                    radialBar: {
                        startAngle: 0,
                        endAngle: 270,
                        dataLabels: {
                            name: {
                                show: false,
                            },
                            value: {
                                show: false,
                            }
                        }
                    },
                    dataLabels: {
                        show: true,
                        total: {
                            show: true,
                            label: 'Total'
                        }
                    }
                },
                yaxis: {
                    min: 0,
                    max: 100,
                },
                labels: Categories,
                legend: {
                    show: true,
                    position: "bottom",
                    floating: false,
                    labels: {
                        colors: '#000',
                        useSeriesColors: false,
                    },
                    formatter: function (seriesName, opts) {
                        return seriesName
                    },
                },
                responsive: [{
                    breakpoint: 1000,
                    options: {
                        chart: {
                            height: '400px'
                        },
                        legend: {
                            position: "bottom",
                            floating: false,
                            labels: {
                                colors: '#000',
                                useSeriesColors: false,
                            },
                        }
                    }
                }]
            };

            chartPolar = new ApexCharts(document.querySelector(Selector), optionsPolar);
            chartPolar.render();
        }

        function DetailColumnBar(TextCategories, TextData, Selector) {
            var Categories = TextCategories.split('|');
            var Data = TextData.split('|');

            var optionsColumn = {
                series: [{
                    name: 'Value',
                    data: Data
                }],
                chart: {
                    type: 'bar',
                    height: '600px',
                    toolbar: {
                        show: false,
                    },
                    animations: {
                        enabled: false,
                        dynamicAnimation: {
                            enabled: false,
                        }
                    },
                },
                theme: {
                    mode: 'light',
                    palette: 'palette10',
                },
                colors: ColoresGrupos,
                plotOptions: {
                    bar: {
                        columnWidth: '45%',
                        distributed: true,
                    }
                },
                legend: {
                    show: false,
                },
                yaxis: {
                    min: 0,
                    max: 100,
                },
                xaxis: {
                    categories: Categories,
                    labels: {
                        rotate: -45,
                        style: {
                            colors: "#000",
                            fontSize: '12px'
                        }
                    }
                },
                responsive: [{
                    breakpoint: 1000,
                    options: {
                        chart: {
                            height: '400px'
                        },
                        legend: {
                            position: "bottom",
                            floating: false,
                        }
                    }
                }]
            };

            chartCol = new ApexCharts(document.querySelector(Selector), optionsColumn);
            chartCol.render();
        }

        function Move(next) {
            var indexActive = Menus.findIndex(f => f.className.includes('active'));

            $(Menus[indexActive]).removeClass("active");
            var item = "#" + Menus[indexActive].href.split('#')[1];
            $(item).removeClass("active");

            if (next) {
                if (indexActive == Menus.length - 2) {
                    $("#next-btn").prop("disabled", true);
                } else {
                    $("#next-btn").prop("disabled", false);
                    $("#prev-btn").prop("disabled", false);
                }
                indexActive++;
                $(Menus[indexActive]).addClass("active");
                item = "#" + Menus[indexActive].href.split('#')[1];
                $(item).addClass("active");
            } else {
                if (indexActive - 1 == 0) {
                    $("#prev-btn").prop("disabled", true);
                } else {
                    $("#prev-btn").prop("disabled", false);
                    $("#next-btn").prop("disabled", false);
                }
                indexActive--;
                $(Menus[indexActive]).addClass("active");
                item = "#" + Menus[indexActive].href.split('#')[1];
                $(item).addClass("active");
            }
        }
    </script>

    @for (int a = 0; a < Model.Grupos.Count(); a++)
    {
        ViewAnswerGroupPoll Grupo = Model.Grupos[a];

        switch ((TipoDeControl)Grupo.Group.TipoReporte)
        {
            case TipoDeControl.ControlMatriz:
                if (a == (Model.Grupos.Count() - 1))
                {
                    <script type="text/javascript">
                        var TextCategories = '@Html.Raw(string.Join("|", Model.ConsolidadoMatriz.Select(s => s.Item2).ToList()))';
                        var TextData = '@Html.Raw(string.Join("|",Model.ConsolidadoMatriz.Select(s => s.Item1).ToList()))';
                        DetailRadialBar(TextCategories, TextData, '#char-consolidadoPolar');
                        DetailColumnBar(TextCategories, TextData, '#char-consolidadoBarra');
                    </script>
                }
                break;
        }
    }

}
@section styleFoot{
    @Styles.Render("~/Content/apx")
}