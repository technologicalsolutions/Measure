@using Measure.Enums
@using Measure.ViewModels.Respuesta
@using Measure.ViewModels.Usuario

@model ViewAnswerResult
@{
    Layout = ViewBag.Layout;
    ViewUser login = HttpContext.Current.Session["login"] as ViewUser;
    List<string> Imagenes = ViewBag.Imagenes as List<string>;
}
@section scriptsHead{
    <script type="text/javascript">
        $("#loader").show();
    </script>
}
<div id="contentReport" style="width:1054px">
    <div style="font-family: Barlow Condensed">
        @if (Model.Wellcome != null)
        {
            foreach (var item in Model.ContenidoReporte.Where(c => c.TipoContenido == (int)TipoContenido.Inicio).OrderBy(o => o.Orden).ToList())
            {
                <div style="page-break-after: always;height:800px">
                    <div style="text-align:center">
                        <div>
                            <img src="@Imagenes[0]" style="width:100%" />
                        </div>
                    </div>
                    <div style="margin:30px;padding-top:40px">
                        <p style="color: #59033B; font-family: Ubuntu !important;font-weight: bold; font-size: 22px; text-transform: capitalize;">@Model.Wellcome.Nombres</p>
                        <p style="color: #59033B; font-weight: 400; font-size: 18px; text-transform: uppercase; ">@Model.Wellcome.NombreEmpresa</p>
                        <p style="color: #1Ec6D9; font-weight: 400; font-size: 16px;">@Measure.Recursos.Recurso.Fecha: @Model.DataEncuesta.FechaRespuesta.ToString()</p>
                        @Html.Raw(item.Html)
                    </div>
                    <div style="padding-top: 5px; height: 60px">
                        <img src="@Imagenes[1]" style="width: 100%;" />
                    </div>
                </div>
            }
        }
        <div style="page-break-after: always;height:800px">
            <div style="text-align:center; margin-top:5px">
                <div>
                    <img src="@Imagenes[2]" style="width:100%" />
                </div>
            </div>
            <table id="charCanvas" style="width:100%;height:630px">
                <tr>
                    <td style="width:50%; text-align:center">
                        <div id="char-consolidadoPolar"></div>
                    </td>
                    <td style="width:50%; text-align:center">
                        <div id="char-consolidadoBarra"></div>
                    </td>
                </tr>
            </table>
            <table id="charCanvas" style="width:100%">
                <tr>
                    <td style="width:50%; text-align:center">
                        <img id="canvasPolar" />
                    </td>
                    <td style="width:50%; text-align:center">
                        <img id="canvasBarra" />
                    </td>
                </tr>
            </table>
            <div style="padding-top: 15px;height: 60px">
                <img src="@Imagenes[1]" style="width: 100%;" />
            </div>
        </div>
        @for (int a = 0; a < Model.Grupos.Count(); a++)
        {
            ViewAnswerGroupPoll Grupo = Model.Grupos[a];
            switch ((TipoDeControl)Grupo.Group.TipoReporte)
            {
                case TipoDeControl.ControlMatriz:
                    <div style="page-break-after: always;height:800px">
                        <div style="margin: 5px 10px">
                            <div style="letter-spacing: 0.24px; text-align: left; padding-top: 5px; height:90px">
                                <strong style="color: @Grupo.Group.Color  !important; font-family: Ubuntu !important; font-weight: bold; font-size: 32px; text-align: justify; ">
                                    @if (login.Idioma == 1)
                                    {
                                        <label>@Model.Grupos[a].Group.es_Es</label>
                                    }
                                    else
                                    {
                                        <label>@Model.Grupos[a].Group.en_US</label>
                                    }
                                </strong>
                                @{
                                    var pregunta = Grupo.RespuestasMatriz.FirstOrDefault().Question.Texto.Split(':')[0];
                                }
                                <p style="color: @Grupo.Group.Color !important;font-size: 24px;margin-bottom: 0;">@pregunta</p>
                            </div>
                            <div style="padding-top: 10px">
                                <table style="width:100%;">
                                    <tr style="height: 620px">
                                        @foreach (var item in Grupo.RespuestasMatriz)
                                        {
                                            <td style="width: 10%; text-align: center">
                                                @{
                                                    string heightCol = (item.ResultQuestionMatrizRange.Barra.Count() * 50).ToString() + "px";
                                                    string heigthCont = item.ResultQuestionMatrizRange.Radial.Serie < 10 ? "10%" : item.ResultQuestionMatrizRange.Radial.Serie.ToString() + "%";
                                                }
                                                <div style=" height: @heightCol; background-color: gray; border-radius: 15px; max-width: 50px; padding: 0; margin: auto; display: flex; flex-wrap: wrap; align-items: flex-end !important;" id="@("col_" + Grupo.Group.Id.ToString())">
                                                    <div style="background-color: @Grupo.Group.Color; height: @heigthCont; border-radius: 15px; font-size: medium; font-weight: 500; padding-top: 3px; width: 50px; flex: 1 0 0%;margin-top: 0;max-width: 100%;padding-left: calc( 24px*.5);padding-right: calc( 24px*.5);color: #fff;">
                                                        <p>@item.ResultQuestionMatrizRange.Radial.Serie</p>
                                                    </div>
                                                </div>
                                                <div style="margin-top: 0.5rem !important">
                                                    <div style="background-color:@Grupo.Group.Color;width: 30px; height: 30px; border-radius: 8px; margin: auto;"></div>
                                                </div>
                                                <div style="margin-top: 0.5rem !important;">
                                                    <strong style="color:@Grupo.Group.Color !important; width: 30px; height: 30px; border-radius: 8px; margin: auto; font-weight: bold; font-size: large; text-align: justify;">
                                                        @Measure.Recursos.Recurso.Resultado
                                                    </strong>
                                                </div>
                                            </td>
                                            <td style="width: 90%;" id="@("matriz_" + Grupo.Group.Id.ToString())">
                                                <div onload="widthDiv(this)">
                                                    @foreach (var SubItem in item.ResultQuestionMatrizRange.Barra)
                                                    {
                                                        int valor = 0;
                                                        int percentaje = 0;
                                                        if (SubItem.Item1 > 0)
                                                        {
                                                            valor = SubItem.Item1;
                                                            percentaje = 100 * valor / (((int)item.ControlM.Maximo - (int)item.ControlM.Minimo) + 1);
                                                        }
                                                        <div>
                                                            <strong style="color: #59033B; font-weight: bold; font-size: 16px; text-align: justify;">@SubItem.Item2</strong>
                                                        </div>
                                                        <div style="background-color: gray; height: 28px; border-radius: 12px;">
                                                            <div style="background-color:@Grupo.Group.Color ;width: @percentaje%;border-radius: 12px; color: #fff; font-size: medium; font-weight: 500; height: 28px; text-align: right; padding-right: 8px;">@SubItem.Item1</div>
                                                        </div>
                                                    }
                                                </div>
                                            </td>
                                        }
                                    </tr>
                                </table>
                            </div>
                        </div>
                        <div style="padding-top: 5px; height: 60px">
                            <img src="@Imagenes[1]" style="width: 100%;" />
                        </div>
                    </div>
                    break;
            }
        }
        @foreach (var item in Model.ContenidoReporte.Where(c => c.TipoContenido == (int)TipoContenido.Fin).OrderBy(o => o.Orden).ToList())
        {
            <div style="page-break-after: always; height: 800px;">
                <div style=" margin: 0 30px; height:700px;">
                    @Html.Raw(item.Html)
                </div>
                <div style="height: 50px">
                    <img src="@Imagenes[1]" style="width: 100%;" />
                </div>
            </div>
        }
    </div>
</div>
@{
    string BckLoader = "~/Content/images/Loader_" + ((Idiomas)login.Idioma).ToString() + ".gif";
}
<div id="loader" style=" display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: url(@Url.Content(BckLoader)) center no-repeat, #fff;
        z-index: 1000;
     ">
</div>
<div class="visually-hidden">
    @if (Model.Email)
    {

        <form action="@Url.RouteUrl("SendEMail")" method="post" id="FrmGenerate">
            <input type="hidden" name="Contenido" id="Contenido" />
            <input type="hidden" name="Report" value="@Model.Report" />
            <input type="hidden" name="Mac" id="Mac" />
            <input type="hidden" name="DataEncuesta" value='@Html.Raw(Json.Encode(Model.DataEncuesta))' />
            <input type="hidden" name="DataUser" id="DataUser" />
            <button id="BtnSubmit" type="submit">Enviar</button>
        </form>
    }
    else
    {
        <form action="@Url.RouteUrl("GeneratePdf")" method="post" id="FrmGenerate">
            <input type="hidden" name="Contenido" id="Contenido" />
            <input type="hidden" name="Mac" id="Mac" />
            <button id="BtnSubmit" type="submit">Enviar</button>
        </form>
    }
</div>

@section styleFoot{
    @Styles.Render("~/Content/apx")
}
@section scripts{
    <script type="text/javascript">
        (function () {
            document.getElementById("BtnSubmit").onclick = function () {
                document.getElementById("FrmGenerate").onValidate = false;
            }
        })();

        const Menus = [].slice.call(document.querySelectorAll('#tab-result .nav-link'));
        const ColoresGrupos = ('@string.Join("|", Model.Grupos.Where(g => g.Group.TipoReporte == 3).Select(s => Html.Raw(s.Group.Color)).ToList())').split('|');
        var chartPolar;
        var chartCol;

        function DetailRadialBar(TextCategories, TextData, Selector) {
            var Categories = TextCategories.split('|');
            var Data = TextData.split('|');
            var optionsPolar = {
                colors: ColoresGrupos,
                series: Data,
                chart: {
                    type: 'polarArea',
                    height: '560px',
                    toolbar: {
                        show: false,
                    },
                    animations: {
                        enabled: false,
                        dynamicAnimation: {
                            enabled: false,
                        }
                    },
                    events: {
                        mounted: function (chartContext, config) {
                            chartContext.dataURI().then(({ imgURI, blob }) => {
                                $("#canvasPolar").prop('src', imgURI);
                            });
                        }
                    }
                },
                theme: {
                    mode: 'light',
                    palette: 'palette10',
                },
                plotOptions: {
                    radialBar: {
                        startAngle: 0,
                        endAngle: 270,
                        dataLabels: {
                            name: {
                                show: false,
                            },
                            value: {
                                show: false,
                            }
                        }
                    },
                    dataLabels: {
                        show: true,
                        total: {
                            show: true,
                            label: 'Total'
                        }
                    }
                },
                yaxis: {
                    min: 0,
                    max: 100,
                },
                labels: Categories,
                legend: {
                    show: true,
                    position: "bottom",
                    floating: false,
                    labels: {
                        colors: '#000',
                        useSeriesColors: false,
                    },
                    formatter: function (seriesName, opts) {
                        return seriesName
                    },
                },
            };
            chartPolar = new ApexCharts(document.querySelector(Selector), optionsPolar);
            chartPolar.render();
        }

        function DetailColumnBar(TextCategories, TextData, Selector) {
            var Categories = TextCategories.split('|');
            var Data = TextData.split('|');

            var optionsColumn = {
                series: [{
                    name: 'Value',
                    data: Data
                }],
                chart: {
                    type: 'bar',
                    height: '560px',
                    toolbar: {
                        show: false,
                    },
                    animations: {
                        enabled: false,
                        dynamicAnimation: {
                            enabled: false,
                        }
                    },
                    events: {
                        mounted: function (chartContext, config) {
                            chartContext.dataURI().then(({ imgURI, blob }) => {
                                $("#canvasBarra").prop('src', imgURI);
                                sendImages();
                            });
                        }
                    }
                },
                theme: {
                    mode: 'light',
                    palette: 'palette10',
                },
                colors: ColoresGrupos,
                plotOptions: {
                    bar: {
                        columnWidth: '45%',
                        distributed: true,
                    }
                },
                legend: {
                    show: false,
                },
                yaxis: {
                    min: 0,
                    max: 100,
                },
                xaxis: {
                    categories: Categories,
                    labels: {
                        rotate: -45,
                        style: {
                            colors: "#000",
                            fontSize: '12px'
                        }
                    }
                },
            };

            chartCol = new ApexCharts(document.querySelector(Selector), optionsColumn);
            chartCol.render();
        }
    </script>

    @for (int a = 0; a < Model.Grupos.Count(); a++)
    {
        ViewAnswerGroupPoll Grupo = Model.Grupos[a];

        switch (Grupo.Group.TipoReporte)
        {
            case 3:
                if (a == (Model.Grupos.Count() - 1))
                {
                    <script type="text/javascript">
                        var TextCategories = '@Html.Raw(string.Join("|", Model.ConsolidadoMatriz.Select(s => s.Item2).ToList()))';
                        var TextData = '@Html.Raw(string.Join("|",Model.ConsolidadoMatriz.Select(s => s.Item1).ToList()))';
                        DetailRadialBar(TextCategories, TextData, '#char-consolidadoPolar');
                        DetailColumnBar(TextCategories, TextData, '#char-consolidadoBarra');
                    </script>
                }
                break;
            case 0:
                <script type="text/javascript">
                    var Data = Array();
                </script>

                foreach (var Respuesta in Grupo.RespuestasAbierta)
                {
                    <script>
                        Data.push({
                            'Pregunta': '@Respuesta.Contenido.Item2',
                            'Respuesta': '@Respuesta.Contenido.Item3'
                        });
                    </script>
                }

                if (Model.Email)
                {
                    <script type="text/javascript">
                        $("#DataUser").val(JSON.stringify(Data));
                    </script>
                }
                break;
        }
    }
    <script type="text/javascript">
        function sendImages() {
            $("#loader").show();

            if (chartPolar.ohYeahThisChartHasBeenRendered) {
                chartPolar.destroy();
                chartPolar.ohYeahThisChartHasBeenRendered = false;
            }
            if (chartCol.ohYeahThisChartHasBeenRendered) {
                chartCol.destroy();
                chartCol.ohYeahThisChartHasBeenRendered = false;
            }

            $("#charCanvas").hide();
            $("#Contenido").val($("#contentReport").html().toString());
            document.getElementById("Mac").value = false;
            //debugger;
            $("#FrmGenerate").submit();

        }

    </script>
}
